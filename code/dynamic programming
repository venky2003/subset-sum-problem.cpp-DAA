// A Dynamic Programming solution
// for subset sum problem


#include <iostream>
using namespace std;
  
// Returns true if there is a subset of set[]
// with sum equal to given sum
bool isSubsetSum(int set[], int n, int sum)
{
    // The value of subset[i][j] will be true if
    // there is a subset of set[0..j-1] with sum
    // equal to i
    bool subset[n + 1][sum + 1];
  
    // If sum is 0, then answer is true
    for (int i = 0; i <= n; i++)
        subset[i][0] = true;
  
    // If sum is not 0 and set is empty,
    // then answer is false
    for (int i = 1; i <= sum; i++)
        subset[0][i] = false;
  
    // Fill the subset table in bottom up manner
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= sum; j++) {
            if (j < set[i - 1])
                subset[i][j] = subset[i - 1][j];
            if (j >= set[i - 1])
                subset[i][j] = subset[i - 1][j]
                               || subset[i - 1][j - set[i - 1]];
        }
    }
  
    
  
    return subset[n][sum];
}
  

int main()
{
	
	int n,sum;
	cout<<"enter the size of an array"<<endl;
	cin>>n;
	cout<<"enter the elments in the array:"<<endl;
	int set[n];
    for(int i=0;i<n;i++){
        cin>>set[i];
    }
    cout<<"enter the target sum:"<<endl;
    cin>>sum;
    if (isSubsetSum(set, n, sum) == true)
        cout <<"Found a subset with given sum";
    else
        cout <<"No subset with given sum";
    return 0;
}
